===============================================================
== Web Programming ============================================
===============================================================

The web is just a collection of documents, mostly html docs,
that a browser interprets and renders.

Within the documents are formatted text and URLs (or uniform
resource allocators). 


===============================================================
== HTML =======================================================
===============================================================

Bold tag                <b>txt</b>     
Emphasis/italic         <em>txt</em>
Anchor tag              <a href="site.address">contents</a>
Display image (with     <img src="PIC.URL" alt="alt text">
 alternate text if
 image fails to load)
Add a line break        <br>
 (an inline tag)
Form a paragraph        <p>Contents</p>

Contain content which   <span>Content</span>
 you can attach text to
 (an inline tag)
Contain content which   <div>Content</div>
 you can attach text    
 to (a block tag)


 HTML Document (with explanation after #)
 --------------

<!DOCTYPE HTML>         # Says it's an HTML doc
<html>                  # Make container for HTML doc
<head>                  # Enclose document header and metadata about doc; has css, javascript
- <title>Title!</title> # Title of the page
</head>
<body>                  # Enclose actual contents
- <b>Content</b>
</body>
</html>


===============================================================
== URLs =======================================================
===============================================================

Example: http://www.google.com/. They have three parts:
    1. The protocol, like 'http', 'https', 'ftp', etc.
    2. The host name or name of server, www.google.com
    3. The path, which follows after '.com/', and gives the
        name of the document we want to access. Shortest path
        is just '/'.

Query (or GET) Parameters
--------------------------

    They pass information to the server when you request
    a particular path.

        Ex. http://www.example.com/foo?p=1&q=neat

    Has path /foo along with two query parameters, p=1
    and q=neat.

    First query param separated by a '?'. Query params 
    separated from each other by a '&'.

Fragments
----------

    Used to reference part of the page you're looking at. 
    Will not be sent to the server when you make a request; 
    instead it just exists in the browser.

        Ex. http://www.example.com#fragment

    Fragments follow query params


URL Encoding
-------------

    Special characters (like !) are replaced by a code.

    Spaces are replaced with +.


===============================================================
== HTTP =======================================================
===============================================================


Ports
----------

    Ex. http://localhost:8000/

    To make a web request, you need
        1. Address of the machine (like localhost)
        2. A port (like 8000)
            a.  Default is 80
            b.  Specify alternatives by :NUM after host 


HTTP (HyperText Transfer Protocol)
-----------------------------------

    The main protocol of the web; it's what your browser uses
    to communicate with web servers.

    Request Line
    -------------

        A browser request line might be something like

            GET /foo HTTP/1.1

        which specifies
            1. A method (like GET or POST): the type of request 
                we're making to the server
            2. Path (like /foo): From the url
            3. Version

        ** The host doesn't show up because you will already be
            conntected to the host, as it's what you use to make
            the connection. The path makes the request.

    Headers
    --------

        The request line is followed by a number of headers:

            - General Form, 'Name: value'

            - Host: www.google.com

                Although we don't have to pass the hostname
                since we used it to connect to the serve, 
                it's good practice for many-named servers or
                servers hosting multiple sites.

            - User-Agent: chrome

                Defines the web browser
            

    Status (Response) Line
    -----------------------

        Once you send a request, you get a response like
                
            HTTP/1.1 200 OK

        This is a status line. It comes with two pieces of 
        info

            1. Status Code: 
                2XX     All good
                3XX     Bit more work to be done.
                4XX     Error on browser side.
                5XX     Error on server side.

            2. Reason Phrase: English language phrase 
                paired with status code.
                

    Response Headers 
    -----------------   

        As the request line is followed by headers, so
        are reponse/status lines followed by headers. 
        Examples:

            - Date: Tue Mar 2014 03:14:31 GMT

                Date request was made

            - Server: Apache / 2.2.3

                Name and version number of server.

            - Content-Type: text/html
                
                Type of document being returned.

            - Content-Length: 1539



===============================================================
== Forms ======================================================
===============================================================


User Input
-----------

    Use these to take user input and save under a name.

        Ex. <form> 
                <input name="q"> <input type="submit"> 
            </form>

    This puts a text box. If you enter contents and hit enter,
    then contents disappear and you'll see in the url
        
        http://theurl.com/page.html?q=contents

    where "contents" is whatever whatever was entered. The
    second tag, with type="submit", adds a submit button.


Action Attribute
----------------

    HTML by default submits to itself, so if we want to
    submit data to a server, we have include an action
    attribute like
        
        <form action="/foo">
            <input ...> <input ...>
        </form>

    The value of the action attribute will be the URL
    of where you want the form to submit the data.

    Ex. <form action="http://www.google.com/search">
            <input name="q"> <input type="submit">
        </form>

    This submits input to a Google search.


