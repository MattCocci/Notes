---------------------------------------------------------------
---------- Terminology ----------------------------------------
---------------------------------------------------------------

    method      functions bound to and acting on objects
    class defn  blueprint for class of objects, describing:
                    - What data the class stores
                    - What methods it has for acting on
                        the stored data data
    object or   Realization of a class, created from a
    instance    blueprint
    attributes  Data and methods of an object


---------------------------------------------------------------
---------- Basic Coding ---------------------------------------
---------------------------------------------------------------

    x%y             Gets the remainder of x/y
    range(n)        Returns a range from 0 to n-1
    range(a,n)      Returns a range from a to n-1
    complex(x,y)    x is real, y is im coef
    x,y,z=(1,2,3)   Assigns 1 to x, 2 to y, and 3 to z
    and, or, not    Logical connectives
    dir(x)          Tells you what functions/methods are
                        available for the object, 'x'
    help("".fn)     Tells you what fn does
    any(list)       Returns true if any item in boolean list
                        is true
    all(list)       Returns true if all items in boolean list
                        are true
    \               Line continuation character
    len(x)          NOT length(x)
    isinstance(x, type)     Tells you whether "x" is an
                                instance of type "type"

    """             Triple quotes can do multiline strings


    Functions
    --------------------------------
    Form:   def fun_name(arg1, arg2, keywd=default, ...):
            """ docstrings """
            #body
            return ret

    Notes:
        -- If return is left out, function returns None
        -- We can use keyword arguments (as opposed
            to positional arguments) to add defaults
            and be agnostic about order


    Lambda Functions
    --------------------------------
    Form                f = lambda x: x**3
    Equivalent to       def f(x):
                            return x**3

    Notes:
        -- Often, you don't assign the lambda function,
            to anything; you use it when you have to
            pass a function as an argument, but don't
            want to define it formally, so you make
            the function anonymous
        -- Lambda functions define the input left of ":"
            and then specify what to do to the input
            right of the ":"


    If Statements
    --------------------------------
    Form:   if condition1:
                commands1
            elif condition2:
                commands2
            else:
                commands3

    While Loops
    --------------------------------
    Form:   while condition:
                commands


    For Loops
    --------------------------------
    Form:   for var in list:
                commands

    Notes: I think it can also work looping
            over tuples, but lists are a big
            thing in Python

    Zip
    --------------------------------
        for x, y in zip(list1, list2):
            cmd

        Notes: For looping through two lists at
            once without indexing


    Enumerate
    --------------------------------
        for index, val in enumerate(list):
            cmd

        Notes: For looping through a list;
            gives the index too


    Syntactic Goodies
    --------------------------------

    x = val1 if cond else val2
        -- Assigns val1 to x if cond satisfied; assigns
            val2 otherwise

    a = fn
        -- Binds function "fn" to a, so a is a synonym
            of fn, and a() works EXACTLY like fn()


    Input/Output, File Management
    --------------------------------

    import os
    os.getcwd()            Gets current workind dir


    f = open('file.txt', 'w')   Opens file.txt for writing,
                                    creating a file object
                                    for writing
    f.write('string')           Writes 'string' to file;
                                    method on file objects
    f.close()                   Close file; method on file
                                    object



    f = open('file.txt', 'r')   Opens file.txt for reading,
    out = f.read()              Reads content of file;
                                    passing to out
    for line in f:              Iterate over lines in a
        cmds                        file open for reading
    f.next()                    Returns the next line



    Importing Modules
    --------------------------------

    from module import fn1, fn2, fn3
        -- Imports specific functions which are called by
            just fn1(), fn2(), and fn3(()
        -- if we write

            from module import *

        we get all the functions from the module
        into theh workspace

    import module [as mod]
        -- Imports all the functions in the packages
        -- Called by module.fn1() if [] excluded, or by
            mod.fn1() if you include []


    For personal modules, a .pyc file gets written upon
    first import. If you make changes to the module
    after first import, you have to do reload(module)
    to recompile the .pyc file with the changes.



---------------------------------------------------------------
---------- Data Structures ------------------------------------
---------------------------------------------------------------


    Lists
    --------------------------------

    list.append(element)    Appends element to end
    list.pop()              Return last element in list,
                                remove from list
    alist[x:y]          Returns from index x up to but NOT
                            including index y


    List Comprehensions
    --------------------------------
    [ cmd for var in list]
        -- Creates a list, looping through "list" and
            executing cmd with var equal to values in
            "list" (presumably, cmd uses var as an input)


    Tuples: Immutable lists
    --------------------------------

    (1,2,3)     Immutable lists--no reassignment allowed
    x[1]        Can index from tuples



    Sets: Unordered Lists
    --------------------------------

    Notes: Unordered lists, no duplicates, allow set operations

    s1 = {'a','b'}
    s2 = {'b','c'}

    s1.issubset(s2) => FALSE
    s1.intersection(s2) => {['b']}

    set([list])     Creates set out of a list
    set((tuple))    Creates set out of a tuple



    Dictionary
    --------------------------------

    d = {}      Initializes a dictionary "seinfeld"
    d[key]      Gives you the corresponding value
                    for a (key, value) pair


    d={'key1':'val1', 'key2':'val2'}    Creates dictionary


    Strings
    --------------------------------

    x.upper        if 'x' is a variable pointing to a string,
            this capitalizes the string associated
            with 'x'
    x.title()   Capitalizes first letters like a title

    s.replace(old, new)


----------------------------------------------------------------
---------- Classes ---------------------------------------------
----------------------------------------------------------------

    Objects
    --------------------------------

    Defn: Instances of some particular class consisting of

        1. A type: Strings, floats, ints
        2. Content
        3. Unique Identity: id(obj) queries the unique id
            of "obj", it's address in memory
        4. >=0 Methods: Functions bundled with objects; act
            on data bundled with object or
            combine that data with new, outside
            data



    Useful Functions
    --------------------------------
    dir(ObjectClass)    Tells you methods & attributes
                            avaliable for an object class
    obj.att             Display attribute
    obj.mthd()          Call method to act on object


    Simplest Class Definition
    --------------------------------
    class ObjectClass:      Create object class, no methods
        pass
    obj = ObjectClass()     Create instance of ObjectClass
    obj.fn = lambda x: cmd  Bind a attribute/method/fn to obj;
                                this uses lambda fns, but we
                                could also just pass a regular
                                function on the righthand side
                                of "="
    obj.val = val           Bind value/data/attribute to object



    Typical Class Definition
    --------------------------------

    General Structure
    --------------------------------

        class ObjectClass:  # Establish class name

            x = data        # Creates a CLASS ATTRIBUTE "x",
                                such that all members of
                                ObjectClass have this
                                attribute; data could be a
                                list, string, float,
                                function, etc.

        def __init__(self): # Special method called a
                                "constructor" to create
                                instances from class defn
            self.att = y    # Create INSTANCE ATTRIBUTE


        def mthd(self):     # Add method to change state or
            self.att = z        attribute of particular
                                instance


        def __len__(self):  # Allows "len" function to be
            return smthng       used on objs in
                                ObjectClass


        def __call__(self, args):
            retrurn smthg           # Allows instances to be
                                        callable; see below


        obj = ObjectClass() # Create instance of ObjectClass
        obj(val)            # Can use this if __call__ defined



    Notes About "self"
    --------------------------------
        -- Think of "self" as a particular instance of a
            class; it's how we refer to those particular
            instances in the definition.
        -- If we want to refere to instance variables,
            NOT class or globalvalues, need to use "self"
        -- Be sure to pass it as the first argument for
            all methods/attributes defined in the class
        -- When consider the method "mthd" for ojbect
            "obj" of class "ObjectClass",

                obj.mthd()

            translates as

                ObjectClass.mthd(obj)

            so self makes a little more sense this way



    Instructive Example
    --------------------------------

    class QuadMap:

        def __init__(self, initial_state):
        self.x = initial_state

        def update(self):
        self.x = 4 * (1 - self.x) * self.x

        def generate_series(self, n):
        trajectory = []
        for i in range(n):
            trajectory.append(self.x)
            self.update
        return trajectory



---------------------------------------------------------------
---------- Scientific Computing -------------------------------
---------------------------------------------------------------

    Scientific Computing Modules
    --------------------------------

    NumPy       Arrays, matrices, linear algebra,
                random draws from std rvs

    SciPy                   Imports numpy if you pull whole
        scipy.optimize      scipy; good sub-libraries listed
        scipy.integrate     below
        scipy.stats

    Matplotlib          Imports Matlab-like plotting
                            capabilities
    Pylab               Imports the whole shebang: numpy,
                            scipy, matplotlib, etc.
    Pandas              Library for dealing with datasets


    NumPy and Arrays
    --------------------------------

    Creating an array:              x = array([x1,x2,...,xn])
    Return the shape of an array:   x.shape
    Reshaping an array
        to matrix or vector:        b = x.shape(r,c)
    Creating a matrix array:    m = array([[a11,a12,...,a1n],
                                            ...
                                           [am1,am2,...,amn]])
    Create zero array:              a = np.zeros(y)
    Create zero matrix:             b = np.zeros((r,c))
    Create ones array:              a = np.ones(y)
    Create ones matrix:             b = np.ones((r,c))
    Convert array to matrix,
        allows you not to use
        dot for multiplication:     A = np.matrix(A)
                                        # A is array


    Summing an array:           x.sum()
    Suppressing
        scientific output:      set_printoptions(suppress=True)
    Evenly spaced array
        of len "length":        np.linspace(start,stop,length)
    Identity matrix             np.identity(size)
    Convert 0/1 array to
        Boolean array which
        can extract elements:   np.array(list01s,dtype=bool)


    Operations
    --------------------------------

        Elementwise product of
            matrices:           A*B
        Matrix multiplication:  np.dot(A,B)
        Vectorized log:         np.log(array)
        Vectorized exp:         np.exp(array)
        Vectorized cos:         np.cos(array)


        Some additional useful operations on arrays:
        a.sort()        a.cumsum()
        a.sum()         a.cumprod()
        a.mean()        a.var()
        a.max()         a.std()
        a.argmax()      a.T()   # Transpose


    Indexing
    --------------------------------
        Vector:     x[i]
                    x[:] for all
        Matrix:     m[i,j]
                    m[:,j] for col j
                    m[i,:] for row i


    Importing/Exporting Data via Arrays
    --------------------------------
        To load:
            data = loadtxt("path",[delimiter=","], [skiprows=1])

        To export:
            savetxt("path", [array,delimiter=","],-[fmt="%5.5f"])

        *[] indicates optional


    Linear Algebra
    --------------------------------
        np.linalg.det(A)        determinant of A
        np.linalg.inv(A)        inverse of A
        np.linalg.eigenvals(A)  eigenvalues of A
        np.linalg.solve(A,b)    solves A*x=b


    Random Draws
    --------------------------------
        np.random.beta(a,b,size=n)
        np.random.binomial(m,theta,size=n)
        np.random.randn(n)

        HOWEVER: Random numbers and statistical
        tasks are probably better handled via
        scipy.stats


    SciPy
    --------------------------------

    Imports NumPy at initialization; has scipy.stats,
        scipy.optimize, and scipy.integration as
        important sub-libraries


    Stats
    --------------------------------

        Ways to import & use distributions:
        --------------------------------

        1.  from scipy.stats import [distr]
            q = distr(shape_params)
            q.rvs(n)    # gen random vars
            q.cdf(x)
            q.pdf(x)
            q.ppf(x)    # inverse cdf fn
            q.mean()

        2.  from scipy.stats import [distr]
            distr.rvs(shape_params, n)
            ...
            distr.mean(shape_params)

        Linear Regression
        --------------------------------

        beta, alpha, r_val, p_val, std_err, =
            linregress(x, y)


    Optimization: where f is some fn
    --------------------------------

        from scipy.optimize import bisect, newton,

        bisect(f, low_bnd, up_bnd)  Bisection, root finding
        newton(f, start_pt)         Newton-Raphson, root finding
        brentq(f, low_bnd, up_bnd)  Hybrid method, root finding
        fsolve(f, low_bnd, up_bnd)  Multivariate root finding
        fixed_point(f, start_pt)    Multivariate root finding
        fminbound(f, low_bnd, up_bnd)  Minimization
        minimize, fmnin, ...        And many more for multivar
                                        minimization


        -- (low_bnd, up_bnd) form search boundaries
        -- You can also find fixed points by using root
            finding too, since for a fixed point
                x - f(x) = 0


    Integration
    --------------------------------

        from scipy.integrate import quad

        integral, error = quad(f, low_bnd, up_bnd)



    Matplotlib and Plotting
    --------------------------------

    Two ways to plot:
        1.  Matlab style starting the doc with

                import pylab *

            which imports the whole shebang of
            matplotlib, scipy, and numpy

        2.  More object-oriented which reduces
            the number of implicit calls in
            option (1) above. Preferred, and
            detailed below

        Library of Examples and Example Code:
            http://matplotlib.org/gallery.html


    Standard Example
    --------------------------------

    import matplotlib.pyplot as plt
    import numpy as np
    from scipy.stats import [distr]


    fig, ax = plt.subplots()    fig is figure instance (a blank
                                    canvas) while ax is an
                                    AxesSublot instance (a frame)
        num_rows, num_cols      Place inside () to have multiple
                                    subplots on same figure
    ax.plot(x, y, ...)          Options (...):
        'k--'                       - Indicates color and line type
        label="lab"                 - Adds label within the legend
        alpha=x                     - For x<1, line a bit transparent
    ax.plot(x2, y2, ...)        Can plot a second series in same
                                    subplot/figure
    ax.legend()                 Show Legend
        loc='upper center'        - Option that can be passed
                                    to change the legend loc
    ax.set_yticks([list])
    ax.set_xticks([list])
    ax.set_ylim(min, max)
    ax.set_xlim(min, max)
    ax.set_title('title')
    plt.show()                  Run this after you run all plots



    NOTE: if multiple subplots used, ax will be a list or
        list of lists, and we'll need to index (like
        ax[i,j], for example ) which plot we're referring to,
        so it'll look like

        ax[i,j].plot(x, y)
        ax[i,j].legend()
        ...

        and so on, and so forth


    Additional Options
    --------------------------------
        ax.grid()                           Adds a grid
        ax.hlines(y, xmin, xmax, lw=2,
            alpha=0.6)                      Add 0 line for x axis
        ax.fill_between(xrange, bound1,
            bound2, color='b', alpha=0.1)   Fill between line



    Adding LaTeX
    --------------------------------

        Wherever text can be added to plots, simply use

            r'string with $latex code$'

        as needed to produce the string you want. The 'r'
        leading character tells us it's a raw string.j



    Pandas: Built on top of NumPy
    --------------------------------

    import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt


    s = pd.Series(numpy_array,      creates a column of data
        name='name')
    s.describe()                    Summary stats
    s.index([list])                 Add names to row indices
    s[index_name]                   Extracts value of index


    df = pd.read_csv('file')        Creates data frame object
                                        from file
    df.head()                       Show a bit of the dataframe
    df.describe()                   Describe Data
    df[r1:r2, ['col1','col2']]      Extracts rows r1 to r2
                                        and columns named
                                        'col1' and 'col2'
    df.pop('col')                   Removes column from dataframe
    df.index([list])                Adds labels to row indices
                                        instead of 0, 1, 2, ...
    df.columns = 'str1',
        'str2', ...                 How you relabel column names
    df['col'].plot(kind='k')        Easy way to plot dataframe
                                        objects, where 'k' could
                                        be 'bar'; just put
                                        plt.show() after
    df.sort_index(by='col',
        ascending=FALSE)            Sort the dataframe on some col



    urllib2: For accessing data over the web
    --------------------------------

    import urllib2

    web_page = urllib2.open('url')  Reads the html to web_page
    web_page.next()                 Returns successive lines of
                                        the html read/received


    Using with Pandas
    --------------------------------

        source = urllib2.open('url')
        data = pd.read_csv(source, index_col=0,
        parse_dates=TRUE, header=None)


--------------------------------------------------------------------
----- IPython ------------------------------------------------------
--------------------------------------------------------------------


    ipython notebook        Opens up python notebook
    %run file.py            Runs a file so you can use all
                                definitions within the file
    pdb                     Debugger mode
    who [class]             Displays variables in workspace of
                                class 'class' (optional)
    whos                    Detailed who

    psearch exp [class]     Searches for variables whose name
                                matches 'exp' of class 'class'
    store var > file        Stores namespace/workspace var
                                in file 'file'
    reset                   Clears workspace
    store -r                Restores workspace to stored values
    store -z                Clears everything that's been stored
    lsmagic                 All of the magic commands
    magicfn?                Gives you high level info about
                                the command magic fn
    magicfn??               Gives you the source code for a
                            magic fn
    edit file               Opens up preferred text editor on file;
                                will execute upon save/exit
    edit -x file            Edit WITHOUT executing upon exit


    cmd?            Gives the help description for "cmd"
    pwd             Print working dir
    cd newdir       Changes director to newdir
    alias           alias lists all of the aliases currently at work;
                        to enter a new one, use the form below:
                        alias cmd1 cmd2
                        Now, typing cmd1 will execute cmd2
    unalias x       Unaliases 'x'
    x = !ls         assigns the files in the current directory to 'x'


    timeit fn(.)    Times how long a function runs



    Logging
    --------------------------------

    logstate        Tells you whether you're logging
    logstart        Starts a log file
    logoff          stops logging
    logon           Restarts logging



    Debugging
    --------------------------------

    debug           Run after an error to enter debug mode
    n               Steps through lines of code

    import ipdb; ipdb.set_trace()   Sets a breakpoint where inserted







