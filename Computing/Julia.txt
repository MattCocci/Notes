========================================================================
== Introduction ========================================================
========================================================================

These are my Julia notes. They are a summary and, in many cases,
verbatim transcription of the official documentation.


========================================================================
== Misc ================================================================
========================================================================

- To start an IJulia session

    ipython notebook --profile=julia

- Run a code file

    include("file.jl")


========================================================================
== Style Conventions ===================================================
========================================================================

- Variable names all lower case, possibly with underscores, but sparingly
- Types start with a capital letter, camelcase
- Functions all lower case
- Mutating function names end in !


========================================================================
== Math ================================================================
========================================================================

WORD_SIZE   Internal var, checks whether target system is 32, 64 bit
eps()       Distance between floating point numbers

Oddities
--------
isequal(NaN,NaN)  yields true
NaN == NaN        yields false
isequal(-0.0,0.0) yields false (-0 is negative zero, 0 positive zero)
-0.0 == 0.0       yields true

Rounding
--------
round(x)
floor(x)
ceil(x)
trunc(x)   Round towards zero

Division
--------
div(x,y)  Truncated division, quotient rounded towards zero
fld(x,y)  Floored division, rounded towards -Inf
cld(x,y)  Ceiling division, rounded towards Inf
gcd(x,y)  Greatest common divisoro
lcm(x,y)  Least common multiple


Special Functions
-----------------
expm1(x)  More accurate exp(x)-1 when x near zero
log1p(x)  More accurate log(1+x) for x near zero


Special Number Types
--------------------
im    Imaginary number
2//3  Rational number


========================================================================
== Strings =============================================================
========================================================================

str[6]    returns type char object at location 6
str[6:6]  returns type string object at location 6
"x = $x"  Substitutes the value of x in for $x (use \$ for an actual $)

search(aString, 'x')    Find location of character x in aString
contains(aString, str)  Checks if str is contained in aString
repeat("xyz", 10)
join                    For joining an array of strings

Regex
-----
r"^\s*(?:#|$)"    Object of type regex
ismatch           For checking regexs, return true/false
match             Return a match object given a regex and string

========================================================================
== Functions ===========================================================
========================================================================

- Functions are first class objects that can be passed around
- "Pass by sharing", no copying
- Most operators are functions so +(x,y) works like x+y. INTO IT.
  Examples:

  [A B C]     hcat()
  [A,B,C]     vcat()
  [A B; C D]  hvcat()
  A'          ctranspose()
  A.'         transpose()
  1:n         colon()
  A[i]        getindex()
  A[i]=x      setindex!()
  A(x)        call(x)

- Functions take a tuple of input arguments and return a tuple of output
  arguments that can be unpacked as in Python

    x,y = foo(2,3)

Function Definition (3 Ways)
----------------------------

  # Usual
  function f(x,y)
    z = x + y
    return z
  end

  # Terse
  f(x,y) = x + y

  # Anonymous
  x -> x^2 + 2x + 1


map()
-----
map(fcn, array)
map(x -> x^2 + 2x, Array)


Variable Arguments
------------------

  fcn(a,b,x,...)

The above binds a and b to the first two arguments, and x bound to a
tuple that holds everything that comes after (which might be nothing,
resulting in an empty x tuple)

You can also splice in arguments (to any function) as follows

  x = (1,2)
  fcn('a', 'b', x...)

which is like fcn('a', 'b', args{:}) in Matlab


Optional and Keyword Arguments
------------------------------
Optional Arguments:

  function foo(a, b, c='default')
    return c
  end

Keyword Arguments: For when the order doesn't matter, and you want to be
able to name arguments specifically

  function plot(x, y; width=2, color="black")
    ###
  end

For optional arguments, all previous arguments are in scope. For keyword
arguments, all arguments are in scope.


Passing Functions as Arguments
------------------------------
Since its sometimes awkward when passing fcns as arguments to other
fcns, use syntax

  acceptingFcn(args) do x
    # annonymous passedFcn
  end

This is equivalent to acceptingFcn(x -> passedFcn(x), args)


========================================================================
== Control Flow ========================================================
========================================================================

Compound Expressions
--------------------
The following two examples of expression definition will both return 3

z = begin
  x = 1
  y = 2
  x + y
end

z = (x=1; y=2; x+y)


If-Else
-------
Really strict in that the conditions must evaluate to a Boolean value
(not ints like in Matlab)

  if cond1
    #
  elseif cond2
    #
  else
    #
  end

Another way to get if-else behavior:

  cond ? retIfCondTrue : retIfCondFlase

Only one of the expressions after ? will be evaluated, and that happens
after ? "chooses" which to use.


Short-Circuit Operators
-----------------------
Use && and ||

Can also be used to do shit, evaluate expressions, and return things (as a kind of abbreviated if-statement):

  n >= 0 || error("n negative")
  n == 0 && return 1


Loops
-----
While loops look like this

  while cond
    # Do stuff
    if someDealBreaker
      break
    end
  end

For loops look like this

  for i = 1:N
    # Do stuff
    if someDealBreaker
      break
    end
    if somethingLessSerious
      continue
    end
  end

  for i = 1:N, j = 1:T
    # Do stuff with i,j
  end

  for i in ["foo", "bar"]
    #
  end

NOTE: If the iterator was not defined outside the loop,
it will *NOT* be available after the loop, so the following would throw
an error:

  for i = 1:N
    println(i)
  end
  i+1


Exceptions, Errors, etc.
------------------------
Define your own exceptions with

  type MyCustomException <: Exception end

Call them as functions, and throw them with

  MyCustomException()
  throw(SomeException())

Create error exceptions with

  error("Error msg")

Other built-ins that do not stop execution:

  info("Information")
  warn("Warning")


Try-Catch
---------
Simple, without exception

  try
    # something
  catch
    # something else
  end

To save the exception as a variable

  try
    # something
  catch x
    if isa(x, DomainError)
      #
    elseif isa(x, BoundsError)
      #
    end
  end


Try-Finally
-----------
To run a bunch of code whether or not the try block fails (esp. useful
for closing files and cleaning up at the end)

  try
    # Code
  finally
    # Whether error or not, do this stuff
  end


Tasks
-----
Useful when some function needs to consume output, but another function
producing that output is not done running.

Example: An estimation might be producing parameter draws, and you
could, at the same time, run a program that consumes those paramater
draws to produce forecasts given a parameter vector.

Define Producer function: Calls produce()

  function producer()
    produce("start")
    for n = 1:4
      produce(2n)
    end
    produce("stop")
  end

Wrap that producer in a "Task":

  p = Task(producer)

To consume values, call consume() repeatedly on the task

  consume(p)
  ...
  consume(p)

Between calls to produce(), the producer's execution is suspended, and
the consumer has control.

Can iterator like

  for x in Task(producer)
    println(x)
  end

Note that Task requires a zero-argument function. Can parameterize
producer. See docs.


========================================================================
== Scoping =============================================================
========================================================================

Julia uses lexical scoping, so a function's scope does not inherit from
its caller's scope but from the scope in which the function was defined.

You can do crazy things with scoping

  function f(x)
    x+y
  end
  y = 2
  f(3)

^That bitch works and gives back 5, even though you didn't define y (an
object used *IN* the function!!!) until after the function declaration.
Julia just needs you to have everything defined by the time the function
is *called*, not necessarily by the time the function is defined.

Declaring constants:

  const e = 2.71828


For-loop scoping
----------------
The following, where i is not defined initially, will throw an error
since the i only exists until the end of the loop, then is thrown away

  for j = 1:5
    j
  end
  j

BUT, if the thing was defined first, before the for loop, you get a 5:

  j = 3
  for j = 1:5
    j
  end
  j

For loops *reuse existing variables* for iterations.

BUT comprehensions do not do this.


========================================================================
== Types ===============================================================
========================================================================

Julia is dynamically typed (so the code strictly need to know the type
before run time), but does allow for some typing before run time.  You
don't have to provide types, but you can very easily, and it helps.

Vocabulary:
- Abstract types
- Concerete types: Cannot have subtypes. They are always the end of some
  branch in a type heirarchy.
- Parameterized types: From documentation, "Both abstract and concrete
  types can be parameterized by other types.  They can also be
  parameterized by symbols, by values of any type for which isbits()
  returns true (essentially, things like numbers and bools that are
  stored like C types or structs with no pointers to other objects), and
  also by tuples thereof. Type parameters may be omitted when they do
  not need to be referenced or restricted."

Lifted directly from the documentation:

  There is no division between object and non-object values: all values
  in Julia are true objects having a type that belongs to a single,
  fully connected type graph, all nodes of which are equally first-class
  as types.

There is an explicit heirarchy of types.

Only values not variables have types. Variables are simply names bound
to values.

Using :: to assert types
------------------------
- In function declarations

    function foo(x::Int8)
      return 2x
    end

- At initial assignment, to force a variable always to be of a certain
  type (so any time you try to assign a value to that name, the value
  will be converted to the specified type). This is very much like types
  in C

    function foo()
      x::Int8 = 1
    end

- In an expressian to ensure that the computed value is of a certain
  type:

    (1+2)::Int


Abstract vs. Concrete Types
---------------------------
Big difference:
- You instantiate instances of concrete types: Things like Int8, Int32,
  Int64, etc.
- You can never instantiate an instant of an abstract type.

Abstract types simply let you say "Hey, all Ints are kind of alike and
you probably want to do the same kinds of things with them, without
really caring whether something is Int8, Int32, Int64, etc."

Abstract types are about creating a sensible heirarchy of types.

Declare new abstract types with

  abstract newType
  abstract newType <: Supertype

If a Supertype is not specified, the supertype is, by default, "Any."


Example
-------
A great example of abstract types is all the diferent types of numbers
you might have:

  abstract Number
  abstract Real     <: Number
  abstract FloatingPoint <: Real
  abstract Integer  <: Real
  abstract Signed   <: Integer
  abstract Unsigned <: Integer


User-Defined Composite Types
----------------------------
Like structs in C, a collection of named fields that can be treated as a
single value. Those fields have different types, so the single
collection that bundles them is said to be an object of "Composite
Type."

Julia isn't so object-oriented that "methods"/functions-for-objects live
inside the object. Rather, Julia uses multiple-dispatch and the types of
all arguments to select a method to run, not just the type of the first
argument ("self" in Python).

They can be defined as follows:

  type NewType
    a  # Will default to type Any
    b::Int64
    c::Float64
  end

Here's how you work with this new type:

  x = NewType("Bob", 3,   2.14) # Create instance of NewType
  y = NewType("Bob", 3.0, 2)    # Same, but second and third arguments
                                #   will be converted to the correct
                                #   type
  names(x)                      # Fieldnames of the type: :a,:b,:c
  x.a, x.b                      # Accessing field values
  x.a = 27                      # Changing the field values


Constructors
------------
When a type is applied like a function (i.e. NewType("Bob", 3, 2.14)),
it's called a constructor.


Immutable Types
---------------

immutable NewType <: SuperType
  a
  b::Int32
end

Note, the objects stored in a field of an immutable type might be
mutable, .e.g. field "a" might hold an array whose elements you can
change, though you can't change field "a" so that it points to another
type of object (Float, Dict, function) or another array.

From the docs: "Ask whether two instances with the same field values
would be considered identical, or if they might need to change
independently over time. If they would be considered identical, the type
should probably be immutable."

Immutable objects are passed by copying, while mutable type objects are
passed by reference.


Parametric Types
----------------
Example

  type Point{T}
    x::T
    y::T
  end

This allows x and y to be of different types so that you could very
easily use Point for ints, floats, etc. "T" is just a dummy for a type
that will be substituted in when you instantiate a new Point object.

Moreover, this will create an abstract type "Point" where Point{Int64}
and Point{Float32} are concrete subtypes of Point.

You can construct instances of type Point by

  Point{Float64}(1.0,2.0)
  Point(1.0,2.0)
  Point(1,2)

In the latter two examples, the type will be inferred from the
arguments.

NOTE: Special attention to this

    julia> Float64 <: Real
    true

    julia> Point{Float64} <: Point{Real}
    false

Parameteric abstract types:

  abstract Pointy{T}

Can restrict the parameters of concrete and abstract parametric types

  type Point{T<:Real}
    x::T
    y::T
  end
  abstract Pointy{T<:Real}


Singleton Types
---------------
Let T be a type like Float64 or Int. Then Type{T} is an abstract type
whose only instance is object T.

  julia> isa(Float64, Type{Float64})
  true

  julia> isa(Real, Type{Float64})
  false

  julia> isa(Type{Float64}, Type)
  true

  julia> isa(Float64, Type)
  true

  julia> isa(1, Type)
  false

Examples are really the only way I have to understand this. I don't have
a very deep understanding of what's going on here yet.


Type Aliases
------------
New names for already expressible types. Useful when a few of the
parameter choices are fixed:

  # Arrays are of type Array{T,N} where T is type and N is ndim
  typealias Vector{T} Array{T,1}
  typealias Matrix{T} Array{T,2}


Functions for Working with types
---------------------------------
isa(someValue, aType)   # Test if something is a particular type
typeof(anything)        # Type of anything
super(aType)            # The supertype of a type


========================================================================
== Methods =============================================================
========================================================================

Functions map a tuple of arguments into a return value.

The implementation of a function might be different depending upon the
types of objects given in the argument tuple, though the high level
human interpretation of the function is the same. (Example + might be
defined different for ints, floats, etc. though it's still just
addition). Multiple dispatch to the rescue.

"A definition of one possible behavior for a function is called a
method." A function is a collection of methods. When a function is
applied to arguments, "the most specific method applicable to those args
is applied."

"Multiple dispatch" is when you use all of the functions arguments to
determine the method to use.

  methods(f)  # Show all methods defined for function f.

Example
-------
Bind these two methods to function "f". You can define the
function as many times as you would like for different combinations of
argument types.

  f(x::FloatingPoint, y::FloatingPoint) = x + y
  f(x::Int, y::Int) = x + y
  f(x::Number, y::Number) = x - y
  f(x::Any, y::Any) = println("Da fuck you doin?")

The above is a little crazy, but it's useful to illustrate the fact that
Julia always shoots for the most *specific* method. So you'd see this
behavior

  # It can match the first method, so use that
  julia> f(2.0, 3.0)
  5

  # It can match the second method so use that
  julia> f(2, 3)
  5

  # It cannot match either of the first two methods, so use the third
  julia> f(2.0, 3)
  -1

  # Catch everything else
  julia> f(f, "aldfkjadklf")
  Da fuck you doin?

So although (2.0,3.0) is a tuple of objects with a supertype of Numbers,
that's not the most specific method. (2.0,3.0) causes you to use the
float method.


Parameteric Methods
-------------------
You can define methods to take parameters

  my_method{T}(x::T, y::T) = ...
  my_append{T}(v::Vector{T}, x::T) = [v ..., x]

Again, you're generating a whole family of methods parameterized by T.
The second function/method has the benefit of doing type-checking before
trying to append.


Note on Optional and Keyword Arguments
--------------------------------------
From the docs:

  Keyword arguments behave quite differently from ordinary positional
  arguments. In particular, they do not participate in method dispatch.
  Methods are dispatched based only on positional arguments, with
  keyword arguments processed after the matching method is identified.


========================================================================
== Constructors ========================================================
========================================================================

Constructs are functions that create new instances of composite types.
Composite type objects, when applied to an argument list as a functions
(like myType("a", 1.0, 3)) can serve as constructors.

Outer Constructor Methods
-------------------------
A constructor is a function. Like all functions in Julia, you can define
additional methods for that function. Example:

  type myType
    a
    b
  end
  myType(a) = myType(a,a)
  myType()  = myType(1)

The type definition let's you inialize new instances of that type by
writing myType(1,2) or myType("a", "b"). Below that, we provide a way to
construct objects of that type when passing only one argument. Below
that, we provide another method to construct without *any* arguments
(invoking the just defined one-argument method in this new method
definition).

These are kind of like bootstrapping constructors from the originally
defined one.

Inner Constructor Methods
-------------------------
Suppose you want to enforce that the first field is less than the
second. Then write

  type myType
    x::Real
    y::Real

    myType(x,y) = x > y ? error("Out of order") : new(x,y)
  end

This makes use of the special and local "new" function. We check that x
is greater than y. If not, error. If yes, return a *new* instance of the
type. We can think of the default constructor method as an automaically
defined inner constructor method that has a call to "new" under the
hood.

Once the type is instantiated, you can only add new outer constructor
methods; you can't add new inner constructor methods.

NOTE: If you define *any* inner constructor methods, no default
constructor method is created. Julia assumes you created all of the
inner constructor methods that you need.

GOOD FORM: Use as few inner constructor methods as possible, only the
essential ones for transformation and error-checking. Everything else,
use outer constructor methods.

Self Referential types can be created as follows

  type SelfRef
    obj::SelfRef

    SelfRef() = (x = new(); x.obj = x)
  end

This works because the function "new" can be called with fewer arguments
than the number of fields for the type. Unspecified fields are
uninitialized. So the above will instantiate an uninitialized object of
that type and assign it to the field obj.

========================================================================
== Modules =============================================================
========================================================================

Modules in Julia are separate global variable workspaces. They allow the
programmer not to worry about namespace conflicts since the programmer
has direct control over the functions imported for use in the module and
exported for use by other programmers.

include("file.jl") statements are totally legal within modules. So you
can use the same chunk of code in multiple modules. Great for testing
purposes.

Example Syntax
--------------
# Start defining the module
module MyModule

  # Import function "show" from module "Base" for use within MyModule.
  # We need to import any functions that we want to add methods to.
  import Base.show

  # Shortcut for import Base.show, Base.println
  import Base: show, println

  # Import all functions within module "OtherLib". It's like using
  # on all functions within OtherLib individually
  importall OtherLib

  # When a global variable is encountered that is not defined in the
  # current module (i.e. between "module MyModule" and "end"), the
  # system will search among variables exported by Lib and import if
  # found there.
  #
  # This differs from import in that it only imports as
  # needed; you just add a searchable module and things will be imported
  # on the fly from that module as needed.
  #
  # NOTE: If you plan to add methods to functions, you *need* to use
  # import. Using won't work
  using Lib

  # Shortcut for using BigLib.thing1, BigLib.thing2
  using BigLib: thing1, thing2

  # Export these things so other modules can use them
  export MyType, foo

  # This will be exported
  type MyType
    a
  end

  # This will be local to the module since it's not exported
  bar(x) = 2x

  # This will be exported
  foo(a::MyType) = bar(a.x) + 1

  # Add method to imported function show
  show(io, a::MyType) = print(io, "MyType $(a.x)")

end

How to use MyModule
-------------------
This is a great table from the docs for fictional MyModule defined

  module MyModule
    export x, y
    x() = "x"
    y() = "y"
    p() = "p"
  end

Import Command                | What is brought into scope            | Available for method extension
------------------------------+---------------------------------------+--------------------------------------
using MyModule                | All exported names (x and y),         | MyModule.x, MyModule.y and MyModule.p
                              |   MyModule.x, MyModule.y, MyModule.p  |
using MyModule.x, MyModule.p  | x and p                               |
using MyModule: x, p          | x and p                               |
import MyModule               | MyModule.x, MyModule.y and MyModule.p | MyModule.x, MyModule.y and MyModule.p
import MyModule.x, MyModule.p | x and p                               | x and p
import MyModule: x, p         | x and p                               | x and p
importall MyModule            | All exported names (x and y)          | x and y


Standard Modules
----------------
- Main: Top level module. Variables defined in prompt go here.
- Core: Implicitly included in all modules. Can't do anything without
        these definitions.
- Base: Implicitly included in all modules

If you don't want to automatically include these in your module, use
keyword "baremodule" in place of "module" in your module definition.


***** Section: Default top-level definitions and bare modules in Modules
should have "implicitly" instead of "explicitly"


========================================================================
== Metaprogramming: Expressions ========================================
========================================================================

Julia represents its own code as a data structure of the language
itself---an object of "Expression" type that can be created and
manipulated from within the language itself.

Every program in Julia starts as a string. That string can be "parsed"
and turned into an object called an "Expression"

  julia> prog = "1+1"
  "1+1"

  julia> ex1 = parse(prog)
  :(1+1)

  julia> typeof(ex1)
  Expr

  julia> dump(ex1)
  Expr
  head: Symbol call
  args: Array(Any,(3,))
    1: Symbol +
    2: Int64 1
    3: Int64 1
  typ: Any

  julia> ex2 = Expr(:call, :+, 1, 1) # Another way to create ex1
  :(1+1)

  julia> ex3 = :(1+1) # Yet another way to create ex1
  :(1+1)

If the colon usage looks a bit weird, hang on. More on that below.

The construction of ex2 offers a way to build expressions directly using
prefix notation.

The call to function "dump" shows that Expression objects are composite
types with three fields:
- symbol                  This identifies the *kind* of expression you have.
- expression arguments    May be symbols, other expressions, literal vals
- result type


Symbols
-------
A symbol is an interned string used as one building block of
expressions. Two ways to create them

  julia> symbol("foo")
  :foo

  julia> :foo
  :foo

Within an expression, symbols are used to denote access to variables.
When an expression is evaluated, a symbol is replaced with the value
bound to that symbol in the appropriate scope.

Note that the colon : is used another way, detailed below in quoting.

Quoting
-------
Quoting let's you create expressions more easily without explicit use of
the Expression constructor, as we saw above:

  julia> a = :(a+b*c+1)
  :(a+b*c+1)

  julia> typeof(a)
  Expr

You can also generate "quote blocks" as follows

  julia> ex = quote
          x = 1
          y = 2
          x + y
         end


Building Expressions
--------------------
Just to recap and extend some of what we saw above for ex1, ex2, and
ex3, we can create expressions in one of three ways:

  :(a + b*c + 1)
  parse("a + b*c + 1")
  Expr(:call, :+, :a, Expr(:call, :*, :b, :c), 1)


Interpolation
-------------
Interpolation of literals or expressions into quoted expressions

  julia> a = 1
  1

  julia> ex = :($a + b)
  :(1 + b)


Evaluation with "eval"
----------------------
Given an Expression object, use "eval" to evaluate or execute it at
global scope

  julia> eval(:(1+2))
  3


========================================================================
== Metaprogramming: Macros =============================================
========================================================================

If you put "@mymacro(args)" in your code, the macro called "mymacro" will
use the arguments to generate an expression and evaluate that expression
at runtime (so you don't need to call "eval" on the expression).

Macros execute when code is parsed (before the full program is run), so
they let the programmer generate and include fragments of customized
code *before* the full program is run.

Example:

  julia> macro sayhello(name)
           return :( println("Hello ", $name) )
         end

  julia> @sayhello("world")
  Hello world

  julia> @sayhello "world" # Alternate way to call
  Hello world

To view the quoted expression generated by a macro (which is SUPER
useful for debugging), use the function "macroexpand()":

  julia> ex = macroexpand( :(@sayhello("world")) )
  :(println("Hello ", "world"))


Within macro definitions, specify local in front of variable assignment
to avoid naming conflicts.










