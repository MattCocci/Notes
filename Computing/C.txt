========================================================================
== Intro .c File =======================================================
========================================================================

/* Comments about file contents */

/* #include statements that pull in both standard and local libraries */

#include <stdio.h>  // Basic input output 
#include "lcl.h"    // Local library 

/* Function prototypes and preprocessor definitions */

int main(int argc, char *argv[]) 
{
  int N = 1;
  printf("Program %d", N);

  return = 0;
}


int otherfcn() 
{
  declare variables;
  program statements;
}

========================================================================
== Compiling and Makefiles =============================================
========================================================================

Unlike Matlab, R, and Python, C is a compiled language rather than
interpreted language. In Python, you type things or execute a function
and the program proceeds line-by-line to call the functions needed to
run on the fly (more or les).

Instead, with C, you don't just run the program. You first compile the
program, at which point the compiler will import and call all the
necessary functions to build an executable file. That executable file is
what you run. You don't run the source code file. You run the
executable.

Therefore, once you have created the source code that constitutes your
program, you have to do the compiling. There are 2 approaches:


gcc or cc
---------
These programs can be run as follows

  gcc infilename.c -o exname

or

  cc infilename.c -o exname

gcc and cc are two different compilers. For now, you can use either.
Both will take the source code file infilename.c and compile it into an
executable called "exname." You run that with "./exname"

The options -Wall passed to gcc will show all warnings.


Make Files
----------
Makefiles are an easy way to automate tasks and stitch programs
together. They will also detect when changes do and don't need to be
made and execute appropriately. 

For example, you might run
  
  make prog

Then, "make" will look in the current directory for "prog.c", run the
correct compiler on it, and output an executable "prog." You can see
that everything done or specified mannually above is done automatically
by make.

You can also create a Makefile (spelled and named exactly that way) and
throw options and other capabilities in there. For example, Makefile
could contain
  
  CFLAGS=-Wall -g

  clean:
    rm -f prog

Then, when you run "make prog", you'll run it with warnings on and with
debugging information (-Wall and -g respectively). Also, when you run
"make clean", you'll clean up the project by executing the commands
under "clean."

  CFLAGS=-Wall 

  all: prog1 prog2

  clean:
    rm -f prog

Now, if you run simply "make", you will compile prog1.c and prog2.c.
You could even put more commands under clear to automate more tasks.

NOTE: Makefiles require tabs not spaces instead of tabs on indenting.

========================================================================
== #include Files ======================================================
========================================================================

These are at the top of the files, you specify the files/libraries to
import/include in your .c file. Some useful ones below. Most have file
extension "h" for "header."

stdio.h   Standard input/output (including printf)
ctype.h   
math.h
stdlib.h
string.h
time.h

========================================================================
== Datatypes and Formatted Printing ====================================
========================================================================

The datatype of an object/variable determines the set of values it can
have and what operations can be performed on it. Below are the different
data types available, the formatting code to use with printf (covered
below), and how they are declared (for a few of the types)

- Numeric
  - short 
  - long (%ld)
  - int (%d)
  - float (%f)
  - double (%f)
- Character
  - char (%c): char mychar = 'A';
  - string (%s): char mystring[] = "A string"; 
    ^This is special/weird. It's an array of chars. No string primitive
- User defined
  - struct 
  - union

========================================================================
== Formatted Printing ==================================================
========================================================================

In the <stdio.h> library.

Example usage:

  printf("%s is %d years old.\n", "Bob", 34);



===============================================================
== Debugging ==================================================
===============================================================

gdb
---

Command line debugger. Let's you access the debugging info that
was stored when you ran gcc with option -g. 

  gdb program.o

Here are some associated commands:
  break linenumber        create breakpoint at specified line
  break file:linenumber   create breakpoint at line in file
  run                     run program
  c                       continue execution
  next                    execute next line
  step                    execute next line or step into function
  quit                    quit gdb
  print expression        print current value of the specified 
                          expression
  help command            in-program help 


valgrind
-------

Diagnoses memory-related problems for a compiled program

  valgrind --track-origins=yes ./program

Note: you need to pass that funky argument because Ubuntu is weird and
doesn't print the line numbers otherwise.


===============================================================
== Expressions and  Variables =================================
===============================================================

- A variable is a named link/reference to a valued stored in
  memory or expression that can be evaluated. 

- An expression is a combination of values, variables,
  operators, and functions. Ex, x = y + 2

- Variable declaration can happen in the body of main or of
  particular functions.  

- In C, you have to declare variables before you use them. You
  don't necessarily have to define the _value_, but you do have
  to define the _datatype_ of variable it will be

    int     Integer
    float   Floating point
    char    Character

  You can also declare on the same line, and selectively.
  Terminate each line with a semicolon.
  Examples:
    
    float pi = 3.1415;
    int a, b, c = 0, d = e = 4;
    int x, y, z; x = 2*y + 3*z;
    char c='A';



===============================================================
== Function Prototypes ========================================
===============================================================

Functions must also be declared before use, before main() and
after the #include files. They follow the general form,

  return_type fname(arg1, arg2, ...); 

Arguments: local variables passed from the caller.
Return Value: Single value returned to caller when function
              exits.

Note, you can also use "void" to signify no return value or
arguments.

Examples:
  int factorial(int n); 
  int rand(void); 


===============================================================
== main() Function ============================================
===============================================================


This is the "entry point" for a C program. Some examples:

int main(void)        

  This accepts no arguments, outputs 0 if
  successful, non-zero int otherwise.

int main(int argc, char **argv):

  This acceps command line arguments.
    

===============================================================
== Other Functions ============================================
===============================================================

If the function is prototyped after the #includes, the function
must match. The variables don't have to match.


===============================================================
== Example Program ============================================
===============================================================

#include <stdio.h>

int main(void) 
{
  const char msg[] = "Goodbye, cruel world."
  puts(msg);

  return 0;
}


const keyword     Qualifies variable as constant
char              Data type representing a single character;
                  written in quotes 'a', '3', 'n'
const char msg[]  A constant array of characters 


===============================================================
=== Strings in C ==============================================
===============================================================

- A string is stored as an array of characters. 
- Strings are null terminated with '\0'. 
- Special characters specified with escape char \
  - \\ backslash
  - \' Apostrophe 
  - \" Quotation mark
  - \b backspace
  - \t tab
  - \r carriage return
  - \n newline


- stdout, stdin: console output and input streams
  - puts(string): print string to stdout
  - putchar(char): print character to stdout
  - char = getchar(): return character from stdin
  - string = gets(string): read line from stdin into string

===============================================================
=== Pre-Processor Macros ======================================
===============================================================

- Begin with #, like #stdin
- Can define constants throughout source file 

    #define msg "Hello, World" 

- Can define functions
    
    #define add3(x,y,z) ((x)+(y)+(z))


===============================================================
=== Logic, Increment/Decrement, and Simple Operations =========
===============================================================

Basic logic: 
  - Short circuit operators (evaluation discontinued if value
    can be determined early): &&, ||, !
  - Bitwise Operators: &, |, and ^ (XOR, i.e. only one true)


x++     short for x=x+1 
++x     short for x=x+1 
x--     short for x=x-1 
--x     short for x=x-1 
y=x++   short for y=x; x=x+1;. x evaluated before incremented.  
y=++x   short for x=x+1; y=x;. x evaluated after incremented.
y=x--   short for y=x; x=x-1;. x evaluated before decremented. 
y=--x   short for x=x-1; y=x;. x evaluate after decremented



x+=1  /* is the same as x=x+1  */
x-=1  /* is the same as x=x-1  */
x*=10 /* is the same as x=x*10 */
x/=2  /* is the same as x=x/2  */
x%=2  /* is the same as x=x%2  */ 

