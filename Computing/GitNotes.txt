=================================================================
======= GIT NOTES ===============================================
=================================================================

- Matthew Cocci, 9/16,2014

=================================================================

Notes based on: www.atlassian.com/git/tutorial/


-- Overview --

  git init                    Adds a .git folder to the current directory
                              transforming that directory into a git
                              repository
  git init dir                Adds a .git folder to the directory "dir",
  git clone <repoloc>         Clones the repo located at repoloc to your local
                              machine; the remote you clone from is named
                              "origin" by default
  git clone <repoloc> <dir>   Clone the repo at repoloc to the directory "dir"
  git add <file>              Stages file for next commit, new or old files
  git add <dir>               Stages all files in <dir> for the next commit


  NOTE: Git add does _not_ mean "add this _file_ to the staging area."
  Rather, it means "add the current _changes_ to this particular file to
  the staging area." 
  
  So when you run git add, Git takes a snapshot of all current changes
  since last commit. Only those changes are staged. Any further edits
  you make to the file before the next commit will not be saved with the
  commit unless you run git add _again_ on the same file before
  committing. So you're not really adding a file to the staging area,
  just a file's current changes.

  

  git commit -m "msg"     Commits staged snapshot to local project repo
                          and history with a message. Git will never change
                          them unless you ask.
  git commit -a           Commit modifications for all files in working
                          directory that are tracked (so have been added with
                          git add at some point), even if those files aren't
                          currently staged
  git rm file             Removes file from Git tracking and from current
                          directory
  git rm --cached <file>  Remove file from Git tracking, but don't remove
                          from disk; mostly used when you forgot to add
                          something to .gitignore & accidentally committed it
  git status              Lists which files are staged, unstaged, and
                          untracked
  .gitignore              Plaintext file that lists files git should NOT
                          show in a call of git status; wildcards allowed,
                          each file on separate line
  git log                 Display entire commit history
  git log -n <limit>      Displays only <limit> commits
  git log --oneline       Condense each commit to single line
  git log --word-diff     Display how words change, rather than line by line
                          diff, the default; useful for text more so than code
  git log --stat          Include which files were altered and the relative
                          number of files altered and lines add/deleted to
                          each
  git log -p              Display patch repping each commit; most detailed
  git log --author="<x>"  Search for commits by particular author
  git log --grep="<x>"    Search for a commit message that includes a
                          string/regex
  git log <file>          Only display commits including specified file
  git diff                If run with no args after any file has changed, this
                          will show the changes you've made since last commit
                          or since last staging (whichever is more recent).
                          Note, if all changes staged, then no output
                          returned.
  git diff --cached       What changes have been staged for commit.



  git log --graph --ll --full-history --color --format=oneline --branches --abbrev-comit

  ^ Really nice git log viewing


-- Remotes: Origin, Fetching, Pulling, Pushing, etc. --

  Remotes are versions of your project that exist elsewhere or on the network.
  Git is designed to be able to interact with these remotes---whether that's
  grabbing versions or development branches from these remotes (either to
  review or merge into your code) or to push changes for others to view.

  If you clone a repo, the remote from which you cloned is, by default, called
  "origin." Then, you can fetch, pull, and push by referring to "origin"
  rather than the full network name and path.
  
  git remote                      Show the shorthand names of remote repos; if
                                  you've cloned, you should at least see
                                  origin
  git remote add <nm> <address>   Add a remote at address <address> with
                                  shorthand name <nm>
  git pull <nm>                   Fetch and merge in changes from remote <nm>;
                                  if no name passed, fetch from origin's
                                  master branch and merge in
  git fetch <nm>                  Fetch changes from remote <nm>, but don't
                                  merge in those changes yet.
  git push <nm> <br>              Push changes to branch <br> of remote <nm>
  git remote show <nm>            Show information about remote <nm>; <nm> is
                                  also optional, you can get information about
                                  all remotes by not using one
  git remote rm <nm>              To remove a remote because it moved or
                                  something

-- Bare Repos --

  Bare repos are repos without a working tree. They don't have files in
  them to edit or run. They are essentially just like a .git/
  folder---they have all information to construct the working tree and
  restore older versions, but nothing intelligible or editable for the
  programmer.
                
    git init --bare dir     Init a bare repo called dir

  After initializing, you can clone this, add and commit files to that
  local cloned version, and then push to this bare repo.

  If, instead, you want to make this a bare repo for an already-existing
  normal git repo, you can cd to the current normal working tree dir and
  run
    
    git remote add origin /path/to/bare/repo

  This will name the bare repo "origin," a common convention. Then, to
  push the most recent commit, run from the normal working tree
  directory

    git push -U origin

  where the -U denotes "upstream."
  
  

-- Checking Out --

    This section talks about checkouts, which let you revert
    the state of your working dir (or a file in your working dir) 
    to a previous state/commit.


    git log                       Tells you the names/codes for each commit
                                  which you can reference when you checkout
    git checkout master           Return to master branch
    git checkout <commit>         Update all files in working dir to match a
                                  specified commit EXACTLY
    git checkout <commit> <file>  Checkout a previous version of a file; turns
                                  file residing in the working dir into an
                                  exact copy of the one from <commit> and adds
                                  it to staging area
    git checkout HEAD <file>      If you checkout a single file as above, make
                                  changes, but don't like it, you run this to
                                  checkout and revert to the most recent
                                  version
    
    NOTE: Checkouts are read only so checking out a file and 
    making changes won't go back and overwrite the files in 
    the commit that you checked out. It's an easy way to
    experiment with previously written code.
    NOTE: HEAD is Git's way of referring to the current snapshot.
    NOTE: The HEAD usually points to the master or some local
    branch; HOWEVER, when you check out a previous commit, 
    HEAD no longer pointsto a branch--it points directly to
    a commit. This is called a "detached HEAD" state.


-- Undoing Changes and Commits --
    
    git commit --amend      Run this right after a commit if you want to
                            change the commit message; can also run this
                            command right after you commit, realized you
                            forgot to add a file, then add that file. In both
                            cases, the second commit (with the --amend flag)
                            replaces the original one that was wrong
    git reset HEAD <file>   If file is staged and you don't want it to be, run
                            this and it will unstage "file", but keep
                            modifications
    git checkout -- <file>  This will discard changes made to file since last
                            commit



    git revert <commit>   Generate a new commit that undoes all changes
                          introduced in <commit>, then apply to current
                          branch. So "git revert HEAD" would undo changes
                          introduced in the most recent commit
    git reset <file>        Remove speified file from staging area,
                but leave working dir unchanged.
                This unstages without overwriting 
                any changes.
    git reset            Reset staging area to match most recent
                commit, but leave working dir 
                unchanged. Unstages all files
                without overwriting any changes
    git reset --hard        Unstage changees AND set working dir
                to match most recent commit. 
                OBLITERATES all uncommited changes,
                rewriting changes in the working dir
    git reset <commit>        Move branch tip back to <commit> and 
                reset the staging area to match, but
                LEAVE ALONE all changes in the 
                working dir so you can recommit a
                bigger batch of files/changes
    git reset --hard <com>  Move branchtip back to <com> commit and
                reset BOTH the staging area and
                working dir to match. Obliterates
                all uncommited changes and commits
                after <com> as well.
    git clean -n        Shows you which files will be removed
                without actually doing it
    git clean -f <path>        Removes untracked files from working
                directory. 
                NOT undoable. 
                -f for "force" which you need to use. 
                <path> optional
                Does not remove files specified in
                .gitignore
    git clean -df        Remove untracked files AND untracked
                dirs from current directory
    git clean -xf        Remove untracked files AND files
                in .gitignore from current dir
 


    KEY: Use "revert" to undo public commits, "reset" to undo 
    local changes.


    NOTE: git revert <commit> undoes an entire commit from proj 
    history by finding the commit you want to go back to and 
    restoring it with a NEW commit (doesn't erase bad commit 
    from history)            
    NOTE: git reset is REALLY FUCKING DANGEROUS. You should only
    use it to undo LOCAL changes in the staging area and
    working directory. NEVER reset snapshots that have been 
    shared with other people or Linus Torvalds will
    bludgeon you with a fine Rawlings ashwood bat.
                
                

-- Git Branches --                

    Branch: an independent line of deveopment


    git branch            List all branches in your repo
    git branch <branch>        Create new branch called <branch>,
                although it does NOT checkout
                the new branch
    git branch -d <branch>  Delete specified branch; only
                works if no unmerged changes; 
                use after you finish and merge
                code back into main branch
    git branch -D <branch>  Force delete branch even if unmerged    
                changes
    git branch -m <branch>  Rename the current branch as <branch>


    git checkout <existing-br>        Check out the specified branch
                    making <existing-br> the 
                    current branch, updating
                    working dir to match
    git checkout -b <new-br>        Create and checkout <new-br>
    git checkout -b <new-br> <existing-br>
                    Create and checkout <new-br>,
                    breaking it off of 
                    <existing-br>, not the 
                    current branch.


    NOTE: Branches are just pointers to commits. There's no
    huge copy-over of files
    NOTE: You can switch working on multiple feature branches by 
    switching between them with checkout.



-- Configuration --

    git config --global user.name <name>    
    - Define author name for all commits by the current user

    git config --global user.email <email>
    - Define the author email to be used for all commits
        by current user

    git config --global alias.<alias-name> <git-command>
    -- Creates a shortcut for a command

    git config --system core.editor <editor>
    -- Sets the default editor, for example I would set
        <editor> as vim

    git config --global --edit
    Opens the global configuration file for editing


    <repo>/.git/config        Houses repository specific settings
    ~/.gitconfig        Houses user-specific settings, where
                options set with the --global
                flag are stored


    NOTE: things done with the global flag will be set for all 
    git projects and repos employed by the current user; 
    without the global flag, the configuration would only 
    apply to the current repository you are working with



    
-- Terminology --

    Staging Area    Buffer between working directory and
                local resository
    Local repository    Buffer between user contributions and
                central repository


-- Sample Usage--
    ssh @            SSH into server that will hold 
                    your project repo
    cd repopath            Navigate to the place you'd like
                    to store your repo
    git init --bare proj.git    Initialize the central repo as
                    a bare repo 
    git clone repoloc dir   Clone the repo located at repoloc
                    to local "dir" directory
    git add hello.py        Add hello.py to staging area
    git commit            Commits hello.py to local repo
    HEAD            Reference for current commit/snapshot,  
                    whether branch of spec commit
    HEAD~x            Ref to commit that came x commits
                    before the current commit


