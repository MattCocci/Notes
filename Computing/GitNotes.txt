=================================================================
======= GIT NOTES ===============================================
=================================================================

- Matthew Cocci, 9/16,2014

=================================================================

Notes based on: www.atlassian.com/git/tutorial/


-- Creating Git Repos --

  git init                    Adds a .git folder to the current directory
                              transforming that directory into a git
                              repository
  git init dir                Adds a .git folder to the directory "dir",
  git clone <repoloc>         Clones the repo located at repoloc to your local
                              machine; the remote you clone from is named
                              "origin" by default, i.e. you use the
                              shorthand name origin within git commands
                              to refer to this repo

-- Basics --

  git status                  Lists which files are staged, unstaged, and
                              untracked
  git add <file>              Stages file for next commit, new or old files
  git add <dir>               Stages all files in <dir> for the next commit


  NOTE: Git add does _not_ mean "add this _file_ to the staging area."
  Rather, it means "add the current _changes_ to this particular file to
  the staging area."

  So when you run git add, Git takes a snapshot of all current changes
  since last commit. Only those changes are staged. Any further edits
  you make to the file before the next commit will not be saved with the
  commit unless you run git add _again_ on the same file before
  committing. So you're not really adding a file to the staging area,
  just a file's current changes.



  git diff                If run with no args after any file has changed, this
                          will show the changes you've made since last commit
                          or since last staging (whichever is more recent).
                          Note, if all changes staged, then no output
                          returned.
  git diff --cached       What changes have been staged for commit.


  git commit -m "msg"     Commits staged snapshot to local project repo
                          and history with a message. Git will never change
                          them unless you ask.
  git commit -a           Commit modifications for all files in working
                          directory that are tracked (so have been added with
                          git add at some point), even if those files aren't
                          currently staged

  git rm file             Removes file from Git tracking and from current
                          directory
  git rm --cached <file>  Remove file from Git tracking, but don't remove
                          from disk; mostly used when you forgot to add
                          something to .gitignore & accidentally committed it
  .gitignore              Plaintext file that lists files git should NOT
                          show in a call of git status; wildcards allowed,
                          each file on separate line

  git log                 Display entire commit history
  git log -n <limit>      Displays only <limit> commits
  git log --oneline       Condense each commit to single line
  git log --word-diff     Display how words change, rather than line by line
                          diff, the default; useful for text more so than code
  git log --stat          Include which files were altered and the relative
                          number of files altered and lines add/deleted to
                          each
  git log -p              Display patch repping each commit; most detailed
  git log --author="<x>"  Search for commits by particular author
  git log --grep="<x>"    Search for a commit message that includes a
                          string/regex
  git log <file>          Only display commits including specified file



  git log --graph --ll --full-history --color --format=oneline --branches --abbrev-comit

  ^ Really nice git log viewing


-- Remotes: Origin, Fetching, Pulling, Pushing, etc. --

  - In git, you have an entire self-contained development project, but
    might want to link up with other repositories so that you can push
    and pull changes.
  - These are "remotes": versions of your project that exist elsewhere
    or on the network.
  - You can create a list of these (stored within the .git/config file)
    using the following commands.
  - Essentially, you will create a list of remote repo addresses (pointers
    to them) and shorthand names for these remote repos so you can
    easily reference in the commands below without giving the full url
    or network address.
  - If you've create a repo by cloning, you've already interacted with
    remotes. Specifically, by cloning, you've create a remote which is,
    by defuault, called "origin."
  - If other people have cloned from the same origin and are working on
    the project too and you would like to interact with them directly
    (without going through the origin remote as in a centralized repo
    structure), you can add them as distinct remotes using "git add".
  - All of this info is stored in the .git/config file so think of these
    commands as just helper commands to modify that

  git remote                      Show the shorthand names of remote repos; if
                                  your repo was created as a clone of
                                  some original repo, you should at
                                  least see "origin."
  git remote add <nm> <loc>       Add a remote at address <loc> with
                                  shorthand name <nm>, which you will
                                  use to refer to it
  git remote rm <nm>              To remove a remote because it moved or
                                  been deprecated
  git remote rename <old> <new>   Rename the remote.
  git remote show <nm>            Show information about remote <nm>,
                                  like url/address and branches.



  git fetch <nm>                  Fetch the changes from remote <nm>,
                                  but don't merge in those changes yet. This is
                                  "safe" in that it doesn't force
                                  changes like pull. Basically see what
                                  everyone is working on.
  git pull <nm>                   Fetch and merge in changes from remote <nm>;
                                  if no name passed, fetch from origin's
                                  master branch and merge in
  git push <nm> <br>              Push changes to branch <br> of remote <nm>



-- Bare Repos --

  Bare repos are repos without a working tree. They don't have files in
  them to edit or run. They are essentially just like a .git/
  folder---they have all information to construct the working tree and
  restore older versions, but nothing intelligible or editable for the
  programmer.

    git init --bare dir     Init a bare repo called dir

  After initializing, you can clone this, add and commit files to that
  local cloned version, and then push to this bare repo.

  If, instead, you want to make this a bare repo for an already-existing
  normal git repo, you can cd to the current normal working tree dir and
  run

    git remote add origin /path/to/bare/repo

  This will name the bare repo "origin," a common convention. Then, to
  push the most recent commit, run from the normal working tree
  directory

    git push -u origin master

  where the -u denotes "upstream."


-- Git Branches --

    Branch: Practically speaking, branches are typically independent
    lines of deveopment. From the standpoint of Git, a branch is just a
    moveable pointer to a commit (there's no large-scale copying over
    done). Developing different branches consists of making commits that
    differ across branches, so that the pointers follow different,
    divergent sequences of commits.

    master: The default branch that is set up by Git.
    HEAD: Special file that is a pointer to your current branch.


    git branch              List all branches in your repo; the branch
                            with a * is your currently active branch,
                            i.e.  the branch HEAD points to
    git branch -r           List all branches in remote repos.
    git branch -a           List all branches in your repo and, if
                            you have remotes added, will show the
                            branches that those remote repos as well.
    git branch --merged     List branches that have been merged to the
                            branch you are currently on; usually, the
                            branches that show up are safe to delete
    git branch --no-merged  List the branches that have work you haven't
                            yet merged into the branch you're currently
                            working on
    git branch <br>         Create new branch called <br>---a pointer
                            that points to the most recent commit; note
                            this does NOT checkout the new branch (i.e.
                            does not change HEAD so that it points to
                            <br>)
    git checkout <br>       Switch to a different branch; this changes
                            the pointer HEAD so that it points to <br>;
                            also changes all files in the working tree
                            so that they match the most recent commit
                            that branch <br> points to
    git checkout -b <br>    Create and checkout <br>; shorthand for the
                            command "git branch <br>" followed by "git
                            checkout <br>".
                            Most useful if a branch has been created on
                            a remote repo and you want it too. This will
                            get you a local copy.
    git merge <br>          Merge changes from branch <br> into you
                            current branch (i.e. whatever HEAD) is
                            pointing to when you run this command
    git mergetool           Visual merging tool for resolving conflicts
    git branch -d <br>      Delete specified branch; only works if no
                            unmerged changes; often used after you
                            finish work on certain code which you then
                            merge back into main branch
    git branch -D <br>      Force delete branch even if unmerged
                            changes; probably don't do this
    git branch -m <br>      Rename the current branch as <branch>

    get branch --set-upstream-to=origin/<nm1> <nm2>   Will set the upstream branch.



    -- Merging Particulars --

    For merging, the process is always the same. Checkout the branch you
    want to merge into; then merge changes from another branch into your
    current checked-out branch.

    Now suppose you merge two branches such that the branches point to
    two separate commits that have a simple parent-child relationship.
    This happens when you create a branch, update some code, and try to
    merge this updated branch back to the main codebase branch. Then
    this results in a "fast-forward" merge where Git simply advances the
    pointer forward to the commit with the updated code.

    Next, suppose you merge two branches with _divergent_ histories.
    That means you're merging the code from two commits that don't have
    a simple parent-child relationship; the branches started from some
    common ancestor commit, but there have been subsequent and separate
    commits to each branch. Whenever you merge branches like this, Git
    will create a special "merge commit" since it cannot proceed with a
    simple "fast-forward" commit as we had above.

    Sometimes a merge won't go smoothly since lines of a file will have
    been modified differently accross branches. Here, you need to take a
    stance and select the changes you want. You can see which files
    weren't merge successfully by running "git status" after you merge
    command. You can also run "git mergetool" to get a visual merging
    tool.


-- Checking Out --

    This section talks about checkouts, which let you revert
    the state of your working dir (or a file in your working dir)
    to a previous state/commit.


    git log                       Tells you the names/codes for each commit
                                  which you can reference when you checkout
    git checkout master           Return to master branch
    git checkout <commit>         Update all files in working dir to match a
                                  specified commit EXACTLY
    git checkout <commit> <file>  Checkout a previous version of a file; turns
                                  file residing in the working dir into an
                                  exact copy of the one from <commit> and adds
                                  it to staging area
    git checkout HEAD <file>      If you checkout a single file as above, make
                                  changes, but don't like it, you run this to
                                  checkout and revert to the most recent
                                  version

    NOTE: Checkouts are read only so checking out a file and
    making changes won't go back and overwrite the files in
    the commit that you checked out. It's an easy way to
    experiment with previously written code.
    NOTE: HEAD is Git's way of referring to the current snapshot.
    NOTE: The HEAD usually points to the master or some local
    branch; HOWEVER, when you check out a previous commit,
    HEAD no longer pointsto a branch--it points directly to
    a commit. This is called a "detached HEAD" state.


-- Undoing Changes and Commits --

    git commit --amend      Run this right after a commit if you want to
                            change the commit message; can also run this
                            command right after you commit, realized you
                            forgot to add a file, then add that file. In both
                            cases, the second commit (with the --amend flag)
                            replaces the original one that was wrong
    git reset HEAD <file>   If file is staged and you don't want it to be, run
                            this and it will unstage "file", but keep
                            modifications
    git checkout -- <file>  This will discard changes made to file since last
                            commit



    git revert <commit>   Generate a new commit that undoes all changes
                          introduced in <commit>, then apply to current
                          branch. So "git revert HEAD" would undo changes
                          introduced in the most recent commit
    git reset <file>        Remove speified file from staging area,
                but leave working dir unchanged.
                This unstages without overwriting
                any changes.
    git reset            Reset staging area to match most recent
                commit, but leave working dir
                unchanged. Unstages all files
                without overwriting any changes
    git reset --hard        Unstage changees AND set working dir
                to match most recent commit.
                OBLITERATES all uncommited changes,
                rewriting changes in the working dir
    git reset <commit>        Move branch tip back to <commit> and
                reset the staging area to match, but
                LEAVE ALONE all changes in the
                working dir so you can recommit a
                bigger batch of files/changes
    git reset --hard <com>  Move branchtip back to <com> commit and
                reset BOTH the staging area and
                working dir to match. Obliterates
                all uncommited changes and commits
                after <com> as well.
    git clean -n        Shows you which files will be removed
                without actually doing it
    git clean -f <path>        Removes untracked files from working
                directory.
                NOT undoable.
                -f for "force" which you need to use.
                <path> optional
                Does not remove files specified in
                .gitignore
    git clean -df        Remove untracked files AND untracked
                dirs from current directory
    git clean -xf        Remove untracked files AND files
                in .gitignore from current dir



    KEY: Use "revert" to undo public commits, "reset" to undo
    local changes.


    NOTE: git revert <commit> undoes an entire commit from proj
    history by finding the commit you want to go back to and
    restoring it with a NEW commit (doesn't erase bad commit
    from history)
    NOTE: git reset is REALLY FUCKING DANGEROUS. You should only
    use it to undo LOCAL changes in the staging area and
    working directory. NEVER reset snapshots that have been
    shared with other people or Linus Torvalds will
    bludgeon you with a fine Rawlings ashwood bat.



-- Configuration --

    git config --global user.name <name>
    - Define author name for all commits by the current user

    git config --global user.email <email>
    - Define the author email to be used for all commits
        by current user

    git config --global alias.<alias-name> <git-command>
    -- Creates a shortcut for a command

    git config --system core.editor <editor>
    -- Sets the default editor, for example I would set
        <editor> as vim

    git config --global --edit
    Opens the global configuration file for editing


    <repo>/.git/config        Houses repository specific settings
    ~/.gitconfig        Houses user-specific settings, where
                options set with the --global
                flag are stored


    git config --global branch.autosetuprebase
    -- Always rebase for git pull, rather than merge

    NOTE: things done with the global flag will be set for all
    git projects and repos employed by the current user;
    without the global flag, the configuration would only
    apply to the current repository you are working with

-- Git Rebase --

  Said simply: Git rebase moves sequences of commits. In particular, if
  you have a sequence of commits following one particular commit (call
  it A), git rebase will kill that sequence extending from A, remove all
  trace that they ever existed there (as an offshoot of A), and then
  "redo/replicate" that sequence of changes/commits, but starting at B.

  Now for some more specifics.

  Assume there is only one master branch both upstream and locally. Now
  suppose you had some local commits that you HAVE NOT pushed or made
  public. (More later on why that's important.) There are also updates
  upstream. You want to merge both sets of changes.

  You have two options for reconciling:

    1 Merging: This will take your last local commit (b), the last
      upstream commit (c), and their common ancestor (a) to do three-way
      merge that reconciles the changes, resulting in a new merge
      commit (m). Looks like

        Upstream master: a - o - c - m
                          \         / <- Merging
        My local master:   o - o - b

      Note, there might be some conflicts that has to be resolved in
      generating commit (m).

    2 Rebasing: Take the last upstream commit, reapply all the
      changes/commits you did in your local master branch (the x's)
      one-by-one on that "newer" upstream master branch (like you had
      all those updates the whole time and your local commits are just
      adding to that history). It looks like
                                          Rebased
                                         *********
        Upstream master: o - o - o - o - v - v - v
                          \
        My local master:   x - x - x
                           *********
                            Killed

      Rebasing basically redoes all the commits you did, but pretends
      that you were applying them to a different base (the updated
      upstream master branch) the whole time, rather than the commit you
      actually split off from. It kills the (x) commits and makes them
      disappear from the history, but replays those changes/commits on a
      more up-to-date upstream master branch, generating new commits,
      the v's.

      The result is a more linear history.

      On top of that, you are reapplying killed (x) commits one-by-one
      onto the last (o) commit. So you will be forced to resolve
      conflicts on a commit-by-commit basis (like you would actually do
      if you had been working of that branch the whole time), rather
      than in one huge merge commit.

  NOTE: Never rebase commits that are published upstream or that someone
  else split off from. That is, don't kill and move any commits that
  weren't ENTIRELY local. If you kill commits that were public or pushed
  upstream, then you are potentially killing commits that others split
  off from. That's a nightmare to reconcile.

  Instead, you only want to rebase *entirely* local commits.

  Rebasing is perhaps most useful in the context of

    git pull --rebase

  which takes your latest local commits and tries to tack them onto the
  end of the pulled upstream branch. If you only ever rebase that way,
  you should be fine, and that's often a better workflow anyway (see
  below).


-- Centralized Workflow --

  Use master branch as the main branch.

  Rather than grabbing changes via

    git pull

  instead, run

    git pull --rebase

  This will try to take your recent changes/commits and move them to the
  end of the master branch like you're "adding on" to work everyone else
  has done.

  This differs from the "git pull" approach, which introduces a merge
  step.

  Aside from a more linear history of the master branch, the advantage
  of the rebase option is that you will be forced to resolve conflicts
  on a commit-by-commit basis. That is, if you pull a branch that has
  some update history your local repo didn't, and if you have 5 recent
  local commits, "git pull --rebase" will do the following:

    1 Go to commit 1/5, check for conflicts between the remote branch
      history and this commit, prompt you to resolve them, and then tack
      that commit on to the end of the branch.
    2 Then move on to commit 2, prompt you to fix conflicts that arise
      between this commit and the result of step 1. Then tack on the
      fixed result to the end of the history.
    3 Repeat until you get through all 5 commits.

  This is preferable to a single huge merge that would take place with a
  simple "git pull." That would require you to fix all comflicts between
  the remote branch and your 5 commits at once, rather than
  commit-by-commit.

  Note, if there is a conflict, you resolve, add the file to the staging
  area, and then run

    git rebase --continue


-- Merging Git Repos --

  This method is based on the tutorial

    scottwb.com/blog/2012/07/14/merge-git-repositories-and-preserve-commit-history

  Changes include updating the example to a better TV show, writing it like a
  bash loop (*that has not actually been tested yet* so don't try to run it as
  is, without closer inspection). Otherwise, it's the same. Written here
  simply in case that guy takes down his page.

  -- Process --

  Say you want to merge repos Jerry, George, Elaine, and Kramer into a new
  repo "Seinfeld" and preserve the commit history.

  Without loss of generality, assume that Jerry, George, Elaine, and Kramer
  are in the home directory, and that Seinfeld should be in the home directory
  too. Below assumes that all the files in those directories have been
  committed (nothing left in staging area or untracked).

  Commands:

    # New directory to merge into; make it, init a git repo there
    newDir="Seinfeld"
    mkdir ~/$newDir
    cd ~/$newDir
    git init
    cd ..

    # Directories to merge
    toMerge="Jerry Elaine George Kramer"
    for dir in $toMerge
    do

      # Create a directory named "$dir" *IN* directory "$dir"
      cd $dir
      mkdir $dir

      # Remove remote origin so you don't transmit errors upstream
      git remote rm origin

      # Move everything into the $dir subdir of $dir
      git mv *.* $dir
      git commit -m "Prepare $dir for merging into $newDir/"

      # Go to the folder your merging into, make a new remote named $dir
      # pointing to $dir and pull it
      cd ~/$newDir
      git remote add $dir ~/$dir/
      git pull $dir master

      # Remove that remote and that repo entirely
      git remote rm $dir
      cd ~/
      rm $dir

    done




