___________WORKSPACE & OBJECTS______________________________________



ls()          # Lists all objects.
ls.str()      # Lists details of all objects
str(myobject) # Lists details of <myobject>.
list.files()  # Lists all files in the current directory.
dir()         # Lists all files in the current directory.
myobject      # Prints simply the object.
rm(myobject)  # removes the object <myobject>.
rm(list=ls()) # removes all the objects in the working space.
save.image()  # saves workspace image to whatever you specify
getwd() 
setwd()

# saves the object <myobject> in a file <myobject.rda>.
save(myobject, file="myobject.rda")
	

Objects     # Things: vectors, matrices, datasets, plots, reg
            # results; typically hold collections of things
workspace   # full of objects


________DIRECTORY_______________________________________________________

dir()			    # Lists all files in the current directory
file.remove()	# Removes a file from current directory


_____DATA TYPES_________________________________________________________


From least to most flexible:

    logical, integer, double, character


Useful Functions
----------------
typeof()        What type of elements it has (numeric, char, etc.)
is.character()  Is a vector of characters
is.double()     
is.numeric()    Is an integer OR a double


Coercion
--------
When data of one type is converted to another, more flexible type 
automatically so that you can use it more easily. For example 1/4 will 
coerce integers 1 and 4 to be doubles so that the division can be done. 
Similarly, c(1, "b") will yield a character vector "1" "b".

Functions:
  as.integer()
  as.character()


_____DATA STRUCTURES________________________________________


Hetero- and Homogeneous refers to whether they must all
be of the same type (all strings, all numbers, etc.):

                  linear |  rectangular
                 ------------------------
Homogeneous     | vector | matrix, array |
                |--------|---------------|
Heterogeneous   | list   | data frame    |
                 ------------------------
 

str(object)   Gives description of any R object


== vectors ==

    To Create:  c(1, 2, 3)
    To Index:   x[1] 
    To Name:    names(x) <- "a_name"
    

    - Lists of elements
    - All elements must be of the same tpe
    - Vectors with common length but different types can be
        combined into data frames (see below)

== matrices ==

    To Create:  matrix(1:10, nrow = 5, ncol = 2)
                as.matrix(vector, nrow, ncol)
    To Index:   
    To Name:    rownames(x) <- "row.name"
                colnames(x) <- "col.name"
    
    - Vector with a dim attribute, but one in two dimensions.
    - Items must be of the same type

== arrays ==

    To Create:  array(1:12, c(2,3,2))
    To Index:    

    - Vector with a dim attribute, but with more than two dimensions. 
    - Items must be of the same type


== lists ==

    To Create:  list(a.vector, a.matrix, a.list, a.df)
                as.list(vector)
    To Index:   a.list$name, a.list[[1]]

    
    - Contain elements that can be of any data type, including other lists
    - This is the most general of all data types. To see an example, you could
      have a list that has at its elements a single scalar, a vector, a matrix,
      a data frame, and another list
    - They can contain other lists, so they nest
    - The [[1]] syntax returns the object IN position one, a single value. [1]
      would return a list, not the contents of said list.


== data frames ==

    To Create:  data.frame(colname1 = vec1, colname2 = vec2, ...)
                data.frame(matrix)
    To Index:   df$colName, df[2,3], df["rname","cname"]

    - A list of equal length vectors.
    - Accessing columns: data.frame$colName
    - Default behavior is to turn strings to factors so use
      stringsAsFactors = FALSE


== Special: Factors ==

    To Create: factor(a.vector)
    
    - A vector in the "factor" class is just an integer vector, BUT one that can
      only take on a restricted set of values. 
    - Using levels() on a factor vector will show the restricted set of unique
      values the factor variable can assume.
    - Often used to define categorical variables. 

    NOTE: 
    1.  Often, when you read in data, doubles or characters will be converted 
        to factor variables. This usually stems from missing data in a column,
        causing the whole column to be coerced into a factor. The fix:
        as.character() then as.double(), or specify how the NA values are
        encoded in the incoming dataset.
    2.  Often, characters will also come in as factors. This is annoying, so 
        use stringsAsFactors = FALSE when reading in.





_______DATA IMPORT EXPORT___________________________________________


load("mywork.rda")    # loads "mywork.rda" into workspace
read.table()          # Reads file into dataframe object 
                      #   check out all the nifty args 
                      #   like header, na.strings, sep
some.df$new.var <- x  # Assigns x to a new column/variable in the
                      #   data frame "some.df"    
                      #   NOTE: let x = NULL to remove
data.frame()          # Creates a data frame from passed objects
scan()                # Can read data into a matrix
exportData()


# NOTE: R automatically reads in a column of character 
# vectors as factor variables when using read.table. To
# suppress this, use stringsAsFactors = False when calling

__________SUBSETTING_____________________________________________________

Basics
------

x[i] <- NULL            # Removes the ith index from object i; works with dfs
x[sample(length(x),n)]  # Sample n observations from x
x[order(x)]             # Sorts x
subset(df.name, conds)  # Easier subsetting from dataframes
which(true.false.vec)   # Convert true-false vector to indices
intersect(x, y)         # Return values for which x and y are both true
union(x, y)             # Return values for which x or y are true
head(df)                # Show the first few rows of a dataframe
tail(df)                # Show the last few rows of a dataframe


Subsetting with nothing (i.e. x[] <- ) can be usefult in assignment because it
will preserve the original object class. 

Lookup Tables
-------------

This is great for character matching and changing labels:

x <- c("m", "f", "m")
lookup <- c(m="Male", f="Female")
lookup[x]
#>      m        f      m
#> "Male" "Female" "Male"

unname(lookup[x])
#> "Male" "Female" "Male"


Simplifying vs. Preserving
--------------------------

A simplifying subset operation will return the simplest possible TYPE of object.
For example, if you pull column 1 (which is a bunch of integers) from a data
frame, simplifying subsetting returns a vector of integers; preserving
subsetting returns a dataframe, same type as the original object.


                  Simplifying   |  Preserving
               --------------------------------
Vector        |    x[[1]]       |    x[1]      |
Factor        | x[1:4, drop=T]  |   x[1:4]     |
Matrix/Array  |    x[1, ]       | x[1,,drop=F] |
List          |    x[[1]]       |    x[1]      |
Dataframe     |   See Below     |  See Below   |
               --------------------------------

Preserving behavior ALWAYS gives you the same type of output as input. 
Simplification is more subtle. Here's the result of each simplifying 
operation by data structure

1. Vector: Drops names.
2. Factor: Drops unused levels.
3. Matrix/Array: If any dimension is length 1, drop that dimension. So
                 you will get a vector, not a column matrix from x[,1]
4. List: Return object inside list, not single element list.
5. Dataframe: Return vector instead of single column dataframe (if you 
              pull one column only. 


NOTE: This is often a source of errors. Generally, good programming practice
says to return the same type of object that is passed in.  Then, use a function
to transform to the type you want after. DON'T use the subsetting process to
modify type; use it to subset only.

NOTE: $ almost equals [[]]. Except the former does partial matching. 
Example

  x <- list(abc=1)
  x$a 
    1 
  x[["a"]]
    NULL


Example with Dataframes
-----------------------------

As an application of simplifying vs. preserving, Say you have a list and you
want to return the first column. There are a number of ways you might go about
this, each to different effect. For simplicity, assume the dataframe is named
"a", with column one as a vector of ints called "C1".

    a[,1], a$C1, a[[1]], a[["C1"]]
  
    Returns the contents of column one in simplest form, so a vector of ints.

    a["C1"], a[1], a[,1, drop=F]

    Returns a dataframe that has one variable, i.e. column 1.





__________DATA MANIPULATION_____________________________________________________

subset(some.df, cond)	# Selects a subset of a data frame based on some 
                      #   conditions you pass
replace()             # Replaces stuff based on conditions
data.class()          # Gives the class of an object
args(function)        # Tells you what args function uses


c()             # puts objects together into a vector
names()         # adds names to cols of df or elements of vector
rbind()         # Puts dfs and matrices together, binding rows
cbind()         # Puts dfs and matrices together, binding columns
matrix()        # reshapes vectors into matrices
t(some.matrix)  # transposes a matrix			
order()         # Returns a vector such that x[order(x)] puts x in 
                #   ascending order
rev()			            # Reverses vector or list


is.na()               # Tests for missing values
rep(x,y)              # Replicates x a total of y times in a vector
seq(x,y,by=,length=)	# From x to y either by z or of length z 
x %in% y        # Checks if x is in y


___________FUNCTIONS____________________________________________________________

for (i in 1:10) {expression}
while (condition) {expression}
function.name <- function (args) {code}

formals(f)       # List arguments needed for function f
body(f)          # List code within the body of f
environment(f)   # Lists the "map" of the location of the functions variables
do.call(f, args) # Call function "f" with arguments arg


codetools::findGlobals(f)   # Lists the global variables (or external
                            # depedencies) for function f


Whenever a function in R is run, a new environment is created to host the
exection. So everything in the body happens in this "new" environment, that is
then ditched when the fucntion finishes running. So functions have a "fresh
start" in one sense.

Lexical Scoping
---------------

When you have nesting of functions and variables, R will always look within the
current environment for the variable or function value. If it can't find it,
then it will look in the environment one level up, continuing if necessary until
it hits the global environment.

Note: When creating a function, The way R looks up the value of variables and
functions depends upon nesting at the time of creation of said function. As a
result, you don't have to know how a function is called to determine how it will
look up values.


Function Environments
---------------------

There are four types of environments associated with a function.

enclosing:  Environment where the function was created; only one per function.
            It belongs to a function and never changes, no matter which
            environment the function might get moved to. So in effect, functions
            don't have to live just in their enclosing environment. They can
            take that enclosing environment with them to other places.
binding:    All environments which have a binding to a function. Determines how
            we find a function. Useful because, as mentioned above, functions
            can live outside their enclsing environment. 
execution:  Environment created to store variables when executing. Thrown away
            after execution is finished. It might become non-trivial if we
            define functions within functions, because then that "child"
            function will have an enclosing environment corresponding to the
            execution environment of the parent function.
calling:    Environment where the function was called.



Lazy evaluation 
---------------

Arguments to a function are only evaluated if they're actually used. To force an
argument to be supplied (even if it may not be used), place "force(arg)" in the
body of the function.


Infix Functions
---------------

These come between arguments and must be of the form %x% where x is some string
of characters. Define them via

`%x%` <- function(args) { body }


Replacement Functions
---------------------

These are creations that worklike

  rownames(x) <- c('a', 'b')

They let you modify objects in place. Example

  `modify<-` <- function(x, position, value) { 
                  x[position] <- value
                }

This would let you change element i of object x like

  modify(x, i) <- 5


___________FUNCTIONAL PROGRAMMING__________________________


R has first class functions---they are treated like any other object. In
particular, you can even define "functionals", which are functions that take
functions as arguments. 

lapply(list, f)   # Applies function "f" to list "list." SUPER useful


Anonymous Functions
-------------------

Although we often assign a name to a function, this isn't strictly necessary. We
can have unnamed functions like 

  function (x) x^2 

which can be passed as an argument (since it is a stand-alone function) to
functionals that take functions as arguments.


Closures
--------

A major use of anonymous functions lies in creating closures---functions that
are written by other functions. They are so named because these anonymous
functions that are created carry with them the parent environment in which they
were defined---i.e. they enclose the parent environment and its associated data. 

This rests crucially on the fact that these anonymous functions (generated
within a function) do, indeed, carry with them the environment in which they
were defined (as discussed in the Function section).  Else, it just seems
confusing and ass-backwards, since the function is created within said
environment---how can it "enclose" or wrap this environment, in the colloqial
sense, that seems to be higher in the food chain? 

But again, the "enclosing" that we mean is the enclosing of the environment/data
that are bound to the newly created function upon inception. Whereas most
environments created to host a function's body/execution get tossed away once
complete, any closures created will "capture" the execution environment.

Ex.

  power <- function(exponent) { 
             function(x) {
               x^exponent
             }
           }
  square <- power(2)
  cube <- power(3)



___________DEBUGGING_______________________________________


The "error" option specifies a function to run upon an error. The function that
we would like to run will be "browser()", which starts an interactive console in
the environment where the error occurred. 

So, for example, by setting the "error" option to be "browser", the chain of
steps and executions is

  Error Happens -> Call Browser Function -> Step into environment of error

But we can do one better. Let's set up a function that calls "browser" when a
function with an error is run for the first time. 

browseOnce <- function() {
  old <- getOption("error")
  function() {
    options(error = old)
    browser()
  }
}
options(error = browseOnce())

See also recover().

Using debug(f) puts "browser()" at the first line within function "f", which
will jump you into debug mode. Then undebug(f) will remove it.

Use try() statements, and try(..., silent = TRUE) to supress error messages. 



___________GGPLOT2_________________________________________

install.packages("ggplot2") # Installs
library(ggplot2)            # Put at top of script to use


# Scatterplot
qplot(col.x, col.y, data=data.frame, color=cat.var, 
    size=size.var, alpha=I(0.5), xlab="x.title"
    ylab="y.title", main="main.title", geom="point")

    # data: Specifies the data frame that col.x 
    #   and col.y are columns of
    # color: specifies which column is a categorical var
    #   that should be used to color the data points and name
    #   those data points in the legend
    # size: specifies variable to use in establishing 
    #   relative sizing of the data points
    # alpha: Sets the transparency
    # geom: Type of plot to make
    

# Bar plot
qplot(cat.x, weight = cont.y, geom="bar")

    # geom: Tells ggplot2 to make a bargraph. 
    # weight: What to plot as the continuous variable in
    #   a bar plot


# Line plot
qplot(cont.x, cont.y, data = data.frame, geom="line")

    # Straight line plot above
   
qplot(cont.x, cont.y, data = data.frame, 
    geom=c("line","point"))

    # Line plot with points attached


# Layering 

    # ggplot is big into "layering" where you add layers
    #   like a regression line on top of the basic plot


    # Adding a regression line with bands
    qplot(cont.x, cont.y) + geom_smooth(method = lm)

    # Adding any old abline
    qplot(cont.x, cont.y) 
        + geom_abline(intercept = b, slope = m)

# Scatterplots via objects

    # Initialize, specifiying data and "aes"thetics
    p <- ggplot(data = data.frame, 
        aes(x = x.data, y = y.data, color = cat.var))

    # Add "points" layer, describing how to display the data
    p <- p + layer(geom = "points")  

    # Render
    p

# "aes" specification

    # "aes" is short for aethstetics and it describes how
    # DATA maps to colors and aethstetic flourishes

    # It specifies how to CONDITIONALLY color plots, while
    # we use other methods for color points or bars 
    # unconditionally (over all data)

    i.e.

    p <- ggplot(data = data.frame)
    p <- p + aes(x = x.data, y = y.data)
    p <- p + ggtitle("My Title")
    p1 <- p + geom_point(aes(colour = cat.var))
    p2 <- p + geom_point(colour = a.colour)

    # p1 will color points by the value of categorical 
    #   variable "cat.var"
    # p2 will color all points as "a.colour"


# Types of geoms
    
    geom_abline
    geom_histogram
    geom_point
    geom_boxplot

    see docs.ggplot2.org/current/index.html
    







